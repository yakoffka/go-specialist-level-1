package main

import "fmt"

func main() {
	// Print - простейший вывод в консоль
	fmt.Print("Print - простейший ")
	fmt.Print("вывод ")
	fmt.Print("в консоль")
	fmt.Print("\n\n")

	// Println - вывод в консоль строки (добавляет перевод каретки после строки)
	fmt.Println("Println - вывод в консоль")
	fmt.Println("с переводом строки")
	fmt.Println("")

	// Printf - форматированный вывод
	fmt.Printf("Printf - форматированный вывод в %s и не %s\n", "консоль", "только")

	// выполняем дз (acquaintance.go)

	// Декларирование переменных
	// Go - язык с полустрогой статической типизацией: тип переменной необходимо (не всегда??) указать, он не может изменяться
	// Декларирование переменной это процесс связывания имени переменной с типом её потенциального значения
	// Процесс (первоначального?) присвоения значения - инициализация. При декларировании переменной происходит ее автоматическая
	// инициализация нулевым (zero-value) значением для данного типа:
	var age int
	fmt.Println("My age is:", age)
	age = 42
	fmt.Println("My age is:", age)

	// Декларирование с одновременной инициализацией:
	var height int = 180
	fmt.Println("Her height is", height)

	// Декларация нескольких переменных с одновременной инициализацией:
	var c, d, e int = 1, 2, 3
	fmt.Println(c, d, e)

	// Декларация нескольких переменных с одновременной инициализацией без указания типа:
	var f, k = 1, 2
	fmt.Println(f, k)

	// Декларация нескольких переменных с одновременной инициализацией без указания типа с разным типом:
	var l, m = 1, "string"
	fmt.Println(l, m)

	// Неявное указание типа (полустрогость типизации)
	var wight = 150
	fmt.Println("Her wight is", wight, "kg")
	fmt.Printf("%T\n", wight)

	// Декларация блока переменных
	var (
		price    float32 = 32.32
		quantity int     = 2
		name     string  = "Жигули"
	)
	fmt.Printf("товар %s, количество %d, цена: %.2f\n", name, quantity, price)

	// Короткая декларация
	count := 10
	fmt.Println(count)

	// Множественная короткая декларация (оператор требует как минимум одной новой переменной!)
	o, p := 11, "new value"
	fmt.Println(o, p)

	// Изменение значения переменных
	o, p = 12, "newest value"
	fmt.Println(o, p)

}
